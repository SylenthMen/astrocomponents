---
// File: src/components/HoverCard.astro
interface Props {
  triggerText: string;
  title: string;
  description: string;
  widthCard?: string;
  colorCard?: string;
}

const { triggerText, title, description, widthCard } = Astro.props;
const { colorCard = "bg-white text-black" } = Astro.props;
---

<div class="hovercard-wrapper inline-block relative">
  <button class="hovercard-trigger text-blue-600 hover:underline"
    >{triggerText}</button
  >
  <div
    class=`hovercard invisible opacity-0 absolute z-10 ${widthCard} p-4 ${colorCard} border border-gray-200 rounded-md shadow-lg transition-all duration-200 ease-in-out`
  >
    <div class="flex gap-x-4">
      <div>
        <img class="w-24 rounded-full" src="/image.jpg" alt="fotito" />
      </div>
      <div>
        <h3 class="text-lg font-semibold mb-2">{title}</h3>
        <p class="text-sm">{description}</p>
      </div>
    </div>
  </div>
</div>

<script>
  class HoverCard {
    wrapper: HTMLElement;
    trigger: HTMLElement;
    card: HTMLElement;
    showTimeout: number | null = null;
    hideTimeout: number | null = null;

    constructor(wrapper: HTMLElement) {
      this.wrapper = wrapper;
      this.trigger = wrapper.querySelector(".hovercard-trigger") as HTMLElement;
      this.card = wrapper.querySelector(".hovercard") as HTMLElement;
      this.addEventListeners();
    }

    addEventListeners() {
      this.trigger.addEventListener("mouseenter", () => this.showCard());
      this.trigger.addEventListener("mouseleave", () => this.hideCard());
      this.card.addEventListener("mouseenter", () => this.cancelHide());
      this.card.addEventListener("mouseleave", () => this.hideCard());
    }

    showCard() {
      if (this.hideTimeout) {
        clearTimeout(this.hideTimeout);
        this.hideTimeout = null;
      }
      this.showTimeout = setTimeout(() => {
        this.card.classList.remove("invisible", "opacity-0");
        this.positionCard();
      }, 200);
    }

    hideCard() {
      if (this.showTimeout) {
        clearTimeout(this.showTimeout);
        this.showTimeout = null;
      }
      this.hideTimeout = setTimeout(() => {
        this.card.classList.add("invisible", "opacity-0");
      }, 200);
    }

    cancelHide() {
      if (this.hideTimeout) {
        clearTimeout(this.hideTimeout);
        this.hideTimeout = null;
      }
    }

    positionCard() {
      const triggerRect = this.trigger.getBoundingClientRect();
      const cardRect = this.card.getBoundingClientRect();

      let top = triggerRect.bottom + window.scrollY;
      let left = triggerRect.left + window.scrollX;

      if (left + cardRect.width > window.innerWidth) {
        left = window.innerWidth - cardRect.width - 10;
      }

      if (top + cardRect.height > window.innerHeight + window.scrollY) {
        top = triggerRect.top + window.scrollY - cardRect.height;
      }

      this.card.style.top = `${top}px`;
      this.card.style.left = `${left}px`;
    }
  }

  function initHoverCards() {
    const hovercardWrappers = document.querySelectorAll(".hovercard-wrapper");
    hovercardWrappers.forEach(
      (wrapper) => new HoverCard(wrapper as HTMLElement)
    );
  }

  initHoverCards();

  document.addEventListener("astro:page-load", initHoverCards);
</script>
