---
interface Option {
  value: string;
  label: string;
}

interface Props {
  name: string;
  options: Option[];
  defaultValue?: string;
}

const { name, options, defaultValue } = Astro.props;
---

<div class="radio-group">
  {
    options.map((option) => (
      <label class="radio-option">
        <input
          type="radio"
          name={name}
          value={option.value}
          checked={option.value === defaultValue}
        />
        <span class="radio-label">{option.label}</span>
      </label>
    ))
  }
</div>

<style>
  :root {
    --color-primary: #05ce91;
    --color-secondary: #f7fafc;
    --color-background: #575757;
    --color-text: #fff;
  }

  .radio-group {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .radio-option {
    display: flex;
    align-items: center;
    cursor: pointer;
  }

  .radio-option input[type="radio"] {
    appearance: none;
    -webkit-appearance: none;
    width: 1.25rem;
    height: 1.25rem;
    border: 2px solid #ccc;
    border-radius: 50%;
    margin-right: 0.5rem;
    outline: none;
    transition: border-color 0.3s ease;
  }

  .radio-option input[type="radio"]:checked {
    border-color: var(--color-primary); /*color borde del radio*/
    background-color: var(--color-primary); /*color de fondo del radio*/
    box-shadow: inset 0 0 0 3px var(--color-background); /*sombra del radio*/
  }

  .radio-label {
    font-size: 1rem;
    color: var(--color-text);
  }
</style>

<script>
  const radioGroup = document.querySelector(".radio-group");

  if (radioGroup) {
    radioGroup.addEventListener("change", (event) => {
      const target = event.target as HTMLInputElement;
      if (target.type === "radio") {
        console.log("Selected value:", target.value);
      }
    });
  }
</script>
