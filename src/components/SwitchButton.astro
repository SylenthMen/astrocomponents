---
export interface SwitchButtonProps {
  id: string;
  name: string;
  label: string;
  checked?: boolean;
  disabled?: boolean;
  onChange?: string;
  switchClass?: string;
  labelClass?: string;
}

const {
  id,
  name,
  label,
  checked = false,
  disabled = false,
  onChange = "",
  switchClass = "",
  labelClass = "",
} = Astro.props as SwitchButtonProps;
---

<div class="flex items-center">
  <label
    for={id}
    class={`relative inline-flex items-center cursor-pointer ${disabled ? "opacity-50" : ""}`}
  >
    <input
      type="checkbox"
      id={id}
      name={name}
      class="sr-only peer"
      checked={checked}
      disabled={disabled}
      data-onchange={onChange}
    />
    <div
      class={`w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600 ${switchClass}`}
    >
    </div>
    <span
      class={`ml-3 text-sm font-medium text-gray-900 dark:text-gray-300 ${labelClass}`}
      >{label}</span
    >
  </label>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const switches = document.querySelectorAll(
      'input[type="checkbox"].sr-only.peer'
    );
    switches.forEach((switchEl) => {
      switchEl.addEventListener("change", (event) => {
        const target = event.target as HTMLInputElement;
        const onChangeAttr = target.getAttribute("data-onchange");
        if (onChangeAttr) {
          const onChangeFn = new Function("event", onChangeAttr);
          onChangeFn(event);
        }
      });
    });
  });
</script>
