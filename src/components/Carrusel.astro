---
const { containerWidth = "w-full" } = Astro.props;
const images = [
  { src: "/1.jpeg", alt: "Descripción de la imagen 1" },
  { src: "/2.jpeg", alt: "Descripción de la imagen 2" },
  { src: "/3.jpeg", alt: "Descripción de la imagen 3" },
  // Agrega más imágenes según sea necesario
];
---

<div class=`relative ${containerWidth} max-w-3xl mx-auto`>
  <div class="overflow-hidden">
    <div
      id="carousel"
      class="flex transition-transform duration-300 ease-in-out"
    >
      {
        images.map((image, index) => (
          <div class="w-full flex-shrink-0">
            <img
              src={image.src}
              alt={image.alt}
              class="w-full h-auto object-cover cursor-pointer rounded-lg"
              data-index={index}
            />
          </div>
        ))
      }
    </div>
  </div>
  <button
    id="prevBtn"
    class="absolute left-0 top-1/2 transform -translate-y-1/2 bg-black bg-opacity-50 text-white p-2 rounded-r-md"
  >
    &lt;
  </button>
  <button
    id="nextBtn"
    class="absolute right-0 top-1/2 transform -translate-y-1/2 bg-black bg-opacity-50 text-white p-2 rounded-l-md"
  >
    &gt;
  </button>
</div>

<div
  id="lightbox"
  class="fixed inset-0 bg-black bg-opacity-90 hidden items-center justify-center z-50"
>
  <img
    id="lightboxImage"
    src=""
    alt=""
    class="max-h-[90vh] max-w-[90vw] object-contain"
  />
  <button id="closeLightbox" class="absolute top-4 right-4 text-white text-2xl"
    >&times;</button
  >
</div>

<script>
  const carousel = document.getElementById("carousel") as HTMLElement;
  const prevBtn = document.getElementById("prevBtn") as HTMLButtonElement;
  const nextBtn = document.getElementById("nextBtn") as HTMLButtonElement;
  const lightbox = document.getElementById("lightbox") as HTMLElement;
  const lightboxImage = document.getElementById(
    "lightboxImage"
  ) as HTMLImageElement;
  const closeLightbox = document.getElementById("closeLightbox") as HTMLElement;
  let currentIndex = 0;
  const totalImages = carousel.children.length;

  function updateCarousel() {
    const offset = currentIndex * -100;
    carousel.style.transform = `translateX(${offset}%)`;
  }

  function showLightbox(index: number) {
    const img = carousel.children[index].querySelector(
      "img"
    ) as HTMLImageElement;
    if (img) {
      lightboxImage.src = img.src;
      lightboxImage.alt = img.alt;
      lightbox.classList.remove("hidden");
      lightbox.classList.add("flex");
    }
  }

  function hideLightbox() {
    lightbox.classList.remove("flex");
    lightbox.classList.add("hidden");
  }

  prevBtn.addEventListener("click", () => {
    currentIndex = (currentIndex - 1 + totalImages) % totalImages;
    updateCarousel();
  });

  nextBtn.addEventListener("click", () => {
    currentIndex = (currentIndex + 1) % totalImages;
    updateCarousel();
  });

  carousel.addEventListener("click", (e) => {
    const target = e.target as HTMLElement;
    if (target.tagName === "IMG") {
      const index = parseInt(target.dataset.index as string);
      showLightbox(index);
    }
  });

  closeLightbox.addEventListener("click", hideLightbox);

  lightbox.addEventListener("click", (e) => {
    if (e.target === lightbox) {
      hideLightbox();
    }
  });

  // Manejar las teclas de flecha y Escape
  document.addEventListener("keydown", (e) => {
    if (e.key === "ArrowLeft") {
      prevBtn.click();
    } else if (e.key === "ArrowRight") {
      nextBtn.click();
    } else if (e.key === "Escape") {
      hideLightbox();
    }
  });
</script>
