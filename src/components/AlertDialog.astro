---
const { tittleAlert, descriptionAlert, textButton } = Astro.props;

const { styleDialog, styleButtonDialog, colorTitle, colorText } = Astro.props;
---

<dialog id="dialog" class=`${styleDialog}`>
  <h2 class=`font-bold text-2xl ${colorTitle}`>{tittleAlert}</h2>
  <p class=`text-sm ${colorText}`>{descriptionAlert}</p>
  <button class=`close float-end ${styleButtonDialog}`>{textButton}</button>
</dialog>
<button class="show">abrir cuadro de dialogo</button>

<style>
  /*   Open state of the dialog  */
  dialog[open] {
    opacity: 1;
    transform: scaleY(1);
  }

  /*   Closed state of the dialog   */
  dialog {
    opacity: 0;
    transform: scaleY(0);
    transition:
      opacity 0.2s ease-out,
      transform 0.2s ease-out,
      overlay 0.2s ease-out allow-discrete,
      display 0.2s ease-out allow-discrete;
    /* Equivalent to
  transition: all 0.7s allow-discrete; */
    padding: 10px;
    border-radius: 5px;
    border: 1px solid #fff;
  }

  /*   Before-open state  */
  /* Needs to be after the previous dialog[open] rule to take effect,
    as the specificity is the same */
  @starting-style {
    dialog[open] {
      opacity: 0;
      transform: scaleY(0);
    }
  }

  /* Transition the :backdrop when the dialog modal is promoted to the top layer */
  dialog::backdrop {
    background-color: rgb(0 0 0 / 0%);
    transition:
      display 0.7s allow-discrete,
      overlay 0.7s allow-discrete,
      background-color 0.7s;
    /* Equivalent to
  transition: all 0.7s allow-discrete; */
  }

  dialog[open]::backdrop {
    background-color: rgb(0 0 0 / 25%);
  }

  /* This starting-style rule cannot be nested inside the above selector
because the nesting selector cannot represent pseudo-elements. */

  @starting-style {
    dialog[open]::backdrop {
      background-color: rgb(0 0 0 / 0%);
    }
  }
</style>

<script>
  const dialogElem = document.getElementById("dialog");
  const showBtn = document.querySelector(".show");
  const closeBtn = document.querySelector(".close");

  showBtn.addEventListener("click", () => {
    dialogElem.showModal();
  });

  closeBtn.addEventListener("click", () => {
    dialogElem.close();
  });
</script>
